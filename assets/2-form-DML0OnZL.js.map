{"version":3,"file":"2-form-DML0OnZL.js","sources":["../../src/js/2-form.js"],"sourcesContent":["// 01 // Оголоси поза будь-якими функціями об’єкт formData з полями email та message, які спочатку мають порожні рядки як значення: { email: \"\", message: \"\" }.\n// 02 //Використовуй метод делегування для відстеження змін у формі через подію input. Зберігай актуальні дані з полів email та message у formData та записуй цей об’єкт у локальне сховище. Використовуй ключ \"feedback-form-state\" для зберігання даних у сховищі.\n// 03 // При завантаженні сторінки перевір, чи є дані у локальному сховищі. Якщо так, використовуй їх для заповнення форми та об'єкта formData. Якщо ні, залиш поля форми порожніми.\n// 04 // Перед відправленням форми переконайся, що обидва поля форми заповнені. Якщо будь-яке з полів (властивостей об’єкта formData) порожнє, показуй сповіщення з текстом «Fill please all fields». Якщо всі поля заповнені, виведи у консоль об’єкт formData з актуальними значеннями, очисти локальне сховище, об’єкт formData і поля форми.\n\n// Default values\nconst formData = {\n    email: \"\",\n    message: \"\",\n}\n\n// Find form\nconst form = document.querySelector(\".feedback-form\");\n\n// Check localStorage for saved data\nconst fillFormFields = () => {\n    try {\n        const formValuesLS = JSON.parse(localStorage.getItem(\"feedback-form-state\"));\n\n        if (formValuesLS === null) {\n            return;\n        }\n\n        // Update values one by one (easy one)\n        // formData.email = formValuesLS.email;\n        // formData.message = formValuesLS.message;\n        // form.email.value = formValuesLS.email;\n        // form.message.value = formValuesLS.message;\n\n        // Update all in cycle (better one)\n        const formLocalStorageKeys = Object.keys(formValuesLS);\n        formLocalStorageKeys.forEach(key => {\n            form.elements[key].value = formValuesLS[key];\n            formData[key] = formValuesLS[key];\n        })\n\n    } catch (err) {\n        console.log(err);\n    }\n    \n}\n\nfillFormFields();\n\n// Save input values to formData\nconst onFormFieldInput = event => {\n    const { target: formField } = event;\n\n    const fieldName = formField.name;\n    const fieldValue = formField.value;\n\n    formData[fieldName] = fieldValue;\n    localStorage.setItem(\"feedback-form-state\", JSON.stringify(formData))\n\n}\n\n// Submit listener\nconst formSubmit = form.addEventListener(\"submit\", event => {\n    event.preventDefault();\n    const emailValue = form.email.value;\n    const messageValue = form.message.value;\n    console.log(messageValue)\n    if ((messageValue && emailValue) == \"\") {\n        alert('Fill please all fields')\n        return\n    }\n    console.log(formData)\n    localStorage.removeItem(\"feedback-form-state\")\n    form.email.value = \"\";\n    form.message.value = \"\";\n\n})\n// Input listener\nform.addEventListener(\"input\", onFormFieldInput)"],"names":["formData","form","fillFormFields","formValuesLS","key","err","onFormFieldInput","event","formField","fieldName","fieldValue","emailValue","messageValue"],"mappings":"AAMA,MAAMA,EAAW,CACb,MAAO,GACP,QAAS,EACb,EAGMC,EAAO,SAAS,cAAc,gBAAgB,EAG9CC,EAAiB,IAAM,CACzB,GAAI,CACA,MAAMC,EAAe,KAAK,MAAM,aAAa,QAAQ,qBAAqB,CAAC,EAE3E,GAAIA,IAAiB,KACjB,OAUyB,OAAO,KAAKA,CAAY,EAChC,QAAQC,GAAO,CAChCH,EAAK,SAASG,CAAG,EAAE,MAAQD,EAAaC,CAAG,EAC3CJ,EAASI,CAAG,EAAID,EAAaC,CAAG,CAC5C,CAAS,CAEJ,OAAQC,EAAK,CACV,QAAQ,IAAIA,CAAG,CAClB,CAEL,EAEAH,IAGA,MAAMI,EAAmBC,GAAS,CAC9B,KAAM,CAAE,OAAQC,CAAW,EAAGD,EAExBE,EAAYD,EAAU,KACtBE,EAAaF,EAAU,MAE7BR,EAASS,CAAS,EAAIC,EACtB,aAAa,QAAQ,sBAAuB,KAAK,UAAUV,CAAQ,CAAC,CAExE,EAGmBC,EAAK,iBAAiB,SAAUM,GAAS,CACxDA,EAAM,eAAc,EACpB,MAAMI,EAAaV,EAAK,MAAM,MACxBW,EAAeX,EAAK,QAAQ,MAElC,GADA,QAAQ,IAAIW,CAAY,GACnBA,GAAgBD,IAAe,GAAI,CACpC,MAAM,wBAAwB,EAC9B,MACH,CACD,QAAQ,IAAIX,CAAQ,EACpB,aAAa,WAAW,qBAAqB,EAC7CC,EAAK,MAAM,MAAQ,GACnBA,EAAK,QAAQ,MAAQ,EAEzB,CAAC,EAEDA,EAAK,iBAAiB,QAASK,CAAgB"}